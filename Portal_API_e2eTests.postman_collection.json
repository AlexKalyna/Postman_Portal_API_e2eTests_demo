{
	"info": {
		"_postman_id": "835ca6e4-bb93-47b8-8671-bf5884d9d0eb",
		"name": "Portal_API_e2eTests",
		"description": "This is a primary collection for the React Portal API testing.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9052892"
	},
	"item": [
		{
			"name": "preconditions",
			"item": [
				{
					"name": "fetch token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set( \"code_challenge\",",
									"    CryptoJS.SHA256(pm.environment.get(\"code_verifier\"))",
									"        .toString(CryptoJS.enc.Base64)",
									"        .replace(\"+\", \"-\")",
									"        .replace(\"/\", \"_\")",
									"        .replace(/=+$/, \"\")",
									");",
									"",
									"/**",
									" * @private",
									" * @description Internal function to run tasks in series",
									" * ",
									" * @param {Array<Function>} tasks",
									" * @param {Function} cb",
									" * @param {Number} currOperation",
									" * @param {Array<Any>} results",
									" */",
									"function _series (tasks, cb, currOperation = 0, results = []) {",
									"    // Bail-out condition",
									"    if (currOperation === tasks.length) {",
									"        return cb(null, results);",
									"    }",
									"",
									"    if (typeof tasks[currOperation] !== 'function') {",
									"        return cb(new Error('asyncSeries: Please provide a function'));",
									"    }",
									"",
									"    tasks[currOperation]((err, res) => {",
									"        if (err) {",
									"            return cb(err);",
									"        }",
									"",
									"        results.push(res);",
									"",
									"        // Recursively call the next task in series till we're done executing all the operations",
									"        return _series(tasks, cb, currOperation + 1, results);",
									"    });",
									"}",
									"",
									"/**",
									" * @description asyncSeries to execute requests in a series format",
									" * ",
									" * @param {Array<Function>} tasks",
									" * @param {Function} cb",
									" */",
									"function asyncSeries (tasks, cb = () => {}) {",
									"    return _series(tasks, cb);",
									"}",
									"",
									"// Usage:",
									"",
									"asyncSeries([",
									"",
									"    //1st call \"Authorize\"",
									"    (cb) => pm.sendRequest({",
									"    url: pm.environment.get('pingURI')+ pm.environment.get('service_id')+'/as/authorize?client_id='+ pm.environment.get('client_id')+'&redirect_uri='+pm.environment.get('redirect_uri')+'&response_type=code&scope=openid profile email portal portal_admin&state=dbdc93063478479fa09bfe728cb261bf&code_challenge='+pm.environment.get('code_challenge')+'&code_challenge_method=S256&response_mode=query',",
									"    method: 'GET'},",
									"(err,res) => {",
									"    pm.environment.set(\"flowId\", res.headers.get('Location').split(\"flowId=\")[1]);",
									"    cb(err,res);",
									"}),",
									"",
									"     //2nd call \"Username\"",
									"    (cb) => pm.sendRequest({",
									"    url: pm.environment.get('pingURI')+pm.environment.get('service_id')+'/flows/'+pm.environment.get('flowId'),",
									"    method: 'POST',",
									"    header:{'Content-type': 'application/vnd.pingidentity.user.lookup+json'},",
									"    body:{mode: 'raw',",
									"            raw: JSON.stringify({'username': pm.environment.get('master_admin_zsto')})",
									"            }",
									"}, ",
									"(err,res) => {",
									"    cb(err,res);",
									"}),",
									"    // 3nd call \"Password\"",
									"    (cb) => pm.sendRequest({",
									"    url: pm.environment.get('pingURI')+pm.environment.get('service_id')+'/flows/'+pm.environment.get('flowId'),",
									"    method: 'POST',",
									"    header:{'content-type': 'application/vnd.pingidentity.usernamePassword.check+json'},",
									"    body:{ mode:'raw',",
									"            raw: JSON.stringify({'password': pm.environment.get('password')})",
									"    } ",
									"}, ",
									"(err,res) => {",
									"    cb(err,res);",
									"}),",
									"    //4th call \"Resume\"",
									"    (cb) => pm.sendRequest({",
									"    url: pm.environment.get('pingURI')+pm.environment.get('service_id')+'/as/resume?flowId='+pm.environment.get('flowId'),",
									"    method: 'GET'",
									"},",
									"(err,res) => {",
									"    let str = res.headers.get('Location').split('code=')[1];",
									"    pm.environment.set('code', str.split('&')[0]);",
									"   cb(err,res);",
									"})  ",
									"]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"token\", response.access_token);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "default"
								},
								{
									"key": "code",
									"value": "{{code}}",
									"type": "default"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}",
									"type": "default"
								},
								{
									"key": "code_verifier",
									"value": "{{code_verifier}}",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{pingURI}}{{service_id}}/as/token",
							"host": [
								"{{pingURI}}{{service_id}}"
							],
							"path": [
								"as",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "sNow token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"   if (pm.response.to.have.status(200)) { ",
									"       let res = pm.response.json();",
									"       pm.environment.set(\"sNowToken\", res.access_token);",
									"    } else {console.log ('Some problems occure while ServiceNow token retreiving.')}",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "{{sNowGrantType}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{sNowUsername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{sNowPassword}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{sNowClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{sNowClientSecret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{sNowBaseURI}}/oauth_token.do",
							"host": [
								"{{sNowBaseURI}}"
							],
							"path": [
								"oauth_token.do"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "organizations",
			"item": [
				{
					"name": "organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaOrganizations\")));",
									"            });",
									"",
									"        const res = pm.response.json();",
									"        const targetOrganization = res.find(e => e.orgCode.includes('ZSTO'));",
									"",
									"        pm.collectionVariables.set('organizationId', targetOrganization.identifier);",
									"        pm.collectionVariables.set('organizationName', targetOrganization.name);",
									"        pm.collectionVariables.set('orgCode', targetOrganization.orgCode);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/organizations",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "organization by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaOrganization\")));",
									"            });",
									"",
									"        const res = pm.response.json();",
									"",
									"        pm.test(\"Check organization identifier\", ()=>{",
									"            pm.expect(res.identifier).to.be.equal(pm.environment.get('x-organization-id'))",
									"        });",
									"",
									"        pm.test.skip(\"Check organization name correctness\", ()=>{",
									"            pm.expect(res.name).to.be.equal(pm.collectionVariables.get('organizationName'))",
									"        });",
									"",
									"        pm.test.skip(\"Check organization orgCode correctness\", ()=>{",
									"            pm.expect(res.orgCode).to.be.equal(pm.collectionVariables.get('orgCode'))",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/organizations/{{organizationId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "organizations_api_keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    if (pm.response.to.have.status(201)) {",
									"        ",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaPostApiKey\")));",
									"            });",
									"",
									"        const res = pm.response.json();",
									"",
									"        pm.test('Check roles field is array and not empty', () => {",
									"            pm.expect(res.roles).to.be.an('array').that.is.not.empty;",
									"        });",
									"",
									"        pm.collectionVariables.set('apiKeyClientId', res.clientId);        ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomString(minValue, maxValue, dataSet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {",
									"    if (!minValue) {",
									"        minValue = 212;",
									"        maxValue = 212;",
									"    }",
									"",
									"    if (!maxValue) {",
									"        maxValue = minValue;",
									"    }",
									"",
									"    let length = _.random(minValue, maxValue),",
									"        randomString = \"\";",
									"",
									"    for (let i = 0; i < length; i++)",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
									"    return randomString;",
									"}",
									"",
									"pm.collectionVariables.set('randomString244', randomString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"test_API_Key_/'.-{{randomString244}}\",\n  \"roles\": [\n    \"{{user_role}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/organizations/{{organizationId}}/keys",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organizationId}}",
								"keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api_key is on the list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"       ",
									"       pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaGetApiKey\")));",
									"            });",
									"       ",
									"       let apiKeyClientId = pm.collectionVariables.get('apiKeyClientId');",
									"       const res = pm.response.json();",
									"       ",
									"       pm.test(`API key clientId: ${pm.collectionVariables.get('apiKeyClientId')} is on the list`, () => {",
									"            id = res.filter(obj => obj.clientId === apiKeyClientId);",
									"            pm.expect(id[0].clientId).to.eql(apiKeyClientId)",
									"        });  ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/organizations/{{organizationId}}/keys",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organizationId}}",
								"keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "organizations_api_keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    if (pm.response.to.have.status(204)) {",
									"",
									"    }  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/organizations/{{organizationId}}/keys/{{apiKeyClientId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organizationId}}",
								"keys",
								"{{apiKeyClientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "api_key is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"       ",
									"       pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaGetApiKey\")));",
									"            });",
									"       ",
									"       let apiKeyClientId = pm.collectionVariables.get('apiKeyClientId');",
									"       const res = pm.response.json();",
									"       ",
									"       pm.test(`API key clientId: ${pm.collectionVariables.get('apiKeyClientId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.clientId === apiKeyClientId);",
									"            pm.expect(apiKeyClientId === undefined)",
									"        });  ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/organizations/{{organizationId}}/keys",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organizationId}}",
								"keys"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    if (pm.response.to.have.status(201)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        const res = pm.response.json();",
									"",
									"        pm.collectionVariables.set('userId', res.identifier);",
									"        pm.collectionVariables.set('userName', res.username);",
									"        pm.collectionVariables.set('userEmail', res.email);",
									"        pm.collectionVariables.set('userFirstName', res.firstName);",
									"        pm.collectionVariables.set('userLastName', res.lastName);",
									"        pm.collectionVariables.set('userPhoneNumber', res.phone);",
									"        pm.collectionVariables.set('userMainRole', res.roles[0]);",
									"        pm.collectionVariables.set('userTimeZone', res.timezone);",
									"        pm.collectionVariables.set('userPhotoUrl', res.photoUrl);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{technician}}\", \"{{user_role}}\", \"{{vpn_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\",\n  \"contactPreferences\": [\n    \"Primary_Contact\",\n    \"Technical_Notifications\"\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "avatar deprecated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"   const res = pm.response.json();",
									"   pm.collectionVariables.set('changedPhotoUrl', res);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": "gif_avatar.gif"
								}
							]
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/avatar",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"",
									"   const res = pm.response.json();",
									"   pm.collectionVariables.set('changedPhotoUrl', res);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "jpeg_avatar.jpeg"
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/:userId/avatar",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								":userId",
								"avatar"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{myUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"    pm.test(\"Response schema validation\", () => {",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUsers\")))",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    const usserId = pm.collectionVariables.get('userId');",
									"    targetUser = res.filter(obj => obj.identifier === usserId);",
									"    username = pm.collectionVariables.get('userName');",
									"    email = pm.collectionVariables.get('userEmail');",
									"    firstName = pm.collectionVariables.get('userFirstName');",
									"    lastName = pm.collectionVariables.get('userLastName');",
									"    phone = pm.collectionVariables.get('userPhoneNumber');",
									"    timeZone = pm.collectionVariables.get('userTimeZone');",
									"    photoUrl = pm.collectionVariables.get('userPhotoUrl');",
									"    contactPreferences = ['Technical_Notifications', 'Primary_Contact'];",
									"",
									"    pm.test(`User with id: ${pm.collectionVariables.get('userId')} is on the list`, () => {",
									"        pm.expect(usserId === targetUser.identifier);",
									"        });",
									"    }",
									"",
									"    pm.test(`Check userInfo: Username is ${username}`, () => {",
									"        pm.expect(username === targetUser.username);",
									"        });",
									"",
									"    pm.test(`Check userInfo: Email is ${email}`, () => {",
									"        pm.expect(email === targetUser.email);",
									"        });",
									"",
									"    pm.test(`Check userInfo: First Name is ${firstName}`, () => {",
									"        pm.expect(firstName === targetUser.firstName);",
									"        });",
									"    ",
									"    pm.test(`Check userInfo: Last Name is ${lastName}`, () => {",
									"        pm.expect(lastName === targetUser.lastName);",
									"        });",
									"",
									"    pm.test(`Check userInfo: Phone is ${phone}`, () => {",
									"        pm.expect(phone === targetUser.phone);",
									"        });",
									"",
									"    pm.test(`Check userInfo: Photo URL is ${photoUrl}`, () => {",
									"        pm.expect(photoUrl === targetUser.photoUrl);",
									"        });",
									"",
									"    pm.test(`Check userInfo: Contact Preferences are ${contactPreferences}`, () => {",
									"        pm.expect(targetUser[0].contactPreferences).to.be.a('array');",
									"        pm.expect(targetUser[0].contactPreferences.length).to.equal(2);",
									"        const hasContactPreferences = (targetUser[0].contactPreferences.includes('Technical_Notifications') &&targetUser[0].contactPreferences.includes('Primary_Contact'));",
									"        pm.expect(hasContactPreferences).to.be.true;",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(\"User First Name is changed\", ()=>{",
									"            pm.expect(res.firstName).to.not.equal(pm.collectionVariables.get('userFirstName'));",
									"        });",
									"",
									"        pm.test(\"User Last Name is changed\", ()=>{",
									"            pm.expect(res.lastName).to.not.equal(pm.collectionVariables.get('userLastName'));",
									"        });",
									"",
									"        pm.test(\"User Email is changed\", ()=>{",
									"            pm.expect(res.email).to.not.equal(pm.collectionVariables.get('userEmail'));",
									"        });",
									"",
									"        pm.test(\"User Phone number is changed\", ()=>{",
									"            pm.expect(res.phone).to.not.equal(pm.collectionVariables.get('userPhoneNumber'));",
									"        });",
									"",
									"        pm.test(\"User Time Zone is changed\", ()=>{",
									"            pm.expect(res.timezone).to.not.equal(pm.collectionVariables.get('userTimeZone'));",
									"        });",
									"",
									"        pm.test(\"User Photo Url is changed\", ()=>{",
									"            pm.expect(res.photoUrl).to.not.equal(pm.collectionVariables.get('userPhotoUrl'));",
									"        });",
									"",
									"        pm.test(\"User main Role is changed\", ()=>{",
									"            pm.expect(res.roles[0]).to.not.equal(pm.collectionVariables.get('userMainRole'));",
									"        });",
									"",
									"        pm.test(\"Contact Preferences are changed\", ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal('Primary_Contact');",
									"        });",
									"",
									"        pm.collectionVariables.set('updatedEmail', res.email);",
									"        pm.collectionVariables.set('updatedFirstName', res.firstName);",
									"        pm.collectionVariables.set('updatedLastName', res.lastName);",
									"        pm.collectionVariables.set('updatedPhoneNumber', res.phone);",
									"        pm.collectionVariables.set('updatedMainRole', res.roles[0]);",
									"        pm.collectionVariables.set('updatedTimeZone', res.timezone);",
									"        pm.collectionVariables.set('updatedPhotoUrl', res.photoUrl);",
									"        pm.collectionVariables.set('updatedContactPreference', res.contactPreferences[0]);",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-Password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{org_role}}\", \"{{user_role}}\", \"{{vpn_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{newTimeZone}}\",\n  \"photoUrl\": \"{{changedPhotoUrl}}\",\n  \"contactPreferences\": [\"Primary_Contact\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUsers\")))",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    const usserId = pm.collectionVariables.get('userId');",
									"    targetUser = res.filter(obj => obj.identifier === usserId);",
									"    email = pm.collectionVariables.get('updatedEmail');",
									"    firstName = pm.collectionVariables.get('updatedFirstName');",
									"    lastName = pm.collectionVariables.get('updatedLastName');",
									"    phone = pm.collectionVariables.get('updatedPhoneNumber');",
									"    timeZone = pm.collectionVariables.get('updatedTimeZone');",
									"    photoUrl = pm.collectionVariables.get('updatedPhotoUrl');",
									"    contactPreferences = ['Primary_Contact'];",
									"",
									"    pm.test(`User with id: ${pm.collectionVariables.get('userId')} is on the list`, () => {",
									"        pm.expect(usserId === targetUser.identifier);",
									"        });",
									"    }",
									"",
									"    pm.test(`Check userInfo: Updated email is ${email}`, () => {",
									"        pm.expect(email === targetUser.email);",
									"        });",
									"",
									"    pm.test(`Check userInfo: Updated First Name is ${firstName}`, () => {",
									"        pm.expect(firstName === targetUser.firstName);",
									"        });",
									"    ",
									"    pm.test(`Check userInfo: Updated Last Name is ${lastName}`, () => {",
									"        pm.expect(lastName === targetUser.lastName);",
									"        });",
									"",
									"    pm.test(`Check userInfo: Updated phone is ${phone}`, () => {",
									"        pm.expect(phone === targetUser.phone);",
									"        });",
									"",
									"    pm.test(`Check userInfo: Updated photo URL is ${photoUrl}`, () => {",
									"        pm.expect(photoUrl === targetUser.photoUrl);",
									"        });",
									"",
									"    pm.test(`Check userInfo: Contact Preference is ${contactPreferences}`, () => {",
									"        pm.expect(targetUser[0].contactPreferences).to.be.a('array');",
									"        pm.expect(targetUser[0].contactPreferences.length).to.equal(1);",
									"        const hasContactPreferences = targetUser[0].contactPreferences.includes('Primary_Contact');",
									"        pm.expect(hasContactPreferences).to.be.true;",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUserPassword\")));",
									"            });",
									"        const res = pm.response.json();",
									"",
									"        pm.collectionVariables.set('userTempPassword', res.password);",
									"",
									"        pm.test(\"User status is: 'MUST_CHANGE_PASSWORD'\", ()=>{",
									"            pm.expect(res.userStatus).to.be.equal(\"MUST_CHANGE_PASSWORD\")",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"newPassword\": \"Qwerty22@{{$randomAlphaNumeric}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}/password",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUserChangePassword\")));",
									"            });",
									"        const res = pm.response.json();",
									"",
									"        pm.collectionVariables.set('changedPassword', res.password);",
									"",
									"        pm.test(\"User status is: 'OK'\", function () {",
									"            pm.expect(res.userStatus).to.be.equal(\"OK\")",
									"        });",
									"",
									"        pm.test(\"User password is changed\", function () {",
									"            pm.expect(res.password).to.be.not.equal(pm.collectionVariables.get('userTempPassword'))",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\":\"{{userTempPassword}}\",\n  \"newPassword\": \"Asdfg11@{{$randomAlphaNumeric}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}/password",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(`User's First Name is changed to - ${pm.collectionVariables.get('newFirstName')} `, ()=>{",
									"            pm.expect(res.firstName).to.equal(pm.collectionVariables.get('newFirstName'));",
									"        });",
									"",
									"        pm.test(`User's Last Name remains not changed`, ()=>{",
									"            pm.expect(res.lastName).to.equal(pm.collectionVariables.get('updatedLastName'));",
									"        });",
									"",
									"        pm.test(`User's Email remains not changed`, ()=>{",
									"            pm.expect(res.email).to.equal(pm.collectionVariables.get('updatedEmail'));",
									"        });",
									"",
									"        pm.test(`User's Phone remains not changed`, ()=>{",
									"            pm.expect(res.phone).to.equal(pm.collectionVariables.get('updatedPhoneNumber'));",
									"        });",
									"",
									"        pm.test(`User's Timezone remains not changed`, ()=>{",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('updatedTimeZone'));",
									"        });",
									"",
									"        pm.test(`User's Photo URL remains not changed`, ()=>{",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpn_role = pm.environment.get('vpn_role');",
									"        const org_role = pm.collectionVariables.get('org_role');",
									"        const user_role = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's role field includes: ` + vpn_role + \", \" + org_role + \", \" + user_role, ()=>{",
									"            pm.expect(res.roles).to.include(vpn_role);",
									"            pm.expect(res.roles).to.include(org_role);",
									"            pm.expect(res.roles).to.include(user_role);",
									"        });",
									"",
									"        pm.test(`User's Source is \"local\"`, ()=>{",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"",
									"        pm.test(`User's Contact Preferences remains not changed`, ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal(pm.collectionVariables.get('updatedContactPreference'));",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newFirstName = pm.variables.replaceIn('{{$randomFirstName}}')",
									"pm.collectionVariables.set('newFirstName', newFirstName);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{newFirstName}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(`User's Last Name is changed to - ${pm.collectionVariables.get('newLastName')} `, ()=>{",
									"            pm.expect(res.lastName).to.equal(pm.collectionVariables.get('newLastName'));",
									"        });",
									"",
									"        pm.test(`User's First Name remains not changed`, ()=>{",
									"            pm.expect(res.firstName).to.equal(pm.collectionVariables.get('newFirstName'));",
									"        });",
									"",
									"        pm.test(`User's Email remains not changed`, ()=>{",
									"            pm.expect(res.email).to.equal(pm.collectionVariables.get('updatedEmail'));",
									"        });",
									"",
									"        pm.test(`User's Phone remains not changed`, ()=>{",
									"            pm.expect(res.phone).to.equal(pm.collectionVariables.get('updatedPhoneNumber'));",
									"        });",
									"",
									"        pm.test(`User's Timezone remains not changed`, ()=>{",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('updatedTimeZone'));",
									"        });",
									"",
									"        pm.test(`User's Photo URL remains not changed`, ()=>{",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpn_role = pm.environment.get('vpn_role');",
									"        const org_role = pm.collectionVariables.get('org_role');",
									"        const user_role = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's role field includes: ` + vpn_role + \", \" + org_role + \", \" + user_role, ()=>{",
									"            pm.expect(res.roles).to.include(vpn_role);",
									"            pm.expect(res.roles).to.include(org_role);",
									"            pm.expect(res.roles).to.include(user_role);",
									"        });",
									"",
									"        pm.test(`User's Source is \"local\"`, ()=>{",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"",
									"        pm.test(`User's Contact Preferences remains not changed`, ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal(pm.collectionVariables.get('updatedContactPreference'));",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newLastName = pm.variables.replaceIn('delete_test_' + '{{$randomLastName}}')",
									"pm.collectionVariables.set('newLastName', newLastName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lastName\": \"{{newLastName}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(`User's Email is changed to - ${pm.collectionVariables.get('newEmail')}`, ()=>{",
									"            pm.expect(res.email).to.equal(pm.collectionVariables.get('newEmail'));",
									"        });",
									"        ",
									"        pm.test(`User's Last Name remains not changed`, ()=>{",
									"            pm.expect(res.lastName).to.equal(pm.collectionVariables.get('newLastName'));",
									"        });",
									"",
									"        pm.test(`User's First Name remains not changed`, ()=>{",
									"            pm.expect(res.firstName).to.equal(pm.collectionVariables.get('newFirstName'));",
									"        });",
									"",
									"",
									"        pm.test(`User's Phone remains not changed`, ()=>{",
									"            pm.expect(res.phone).to.equal(pm.collectionVariables.get('updatedPhoneNumber'));",
									"        });",
									"",
									"        pm.test(`User's Timezone remains not changed`, ()=>{",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('updatedTimeZone'));",
									"        });",
									"",
									"        pm.test(`User's Photo URL remains not changed`, ()=>{",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpn_role = pm.environment.get('vpn_role');",
									"        const org_role = pm.collectionVariables.get('org_role');",
									"        const user_role = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's role field includes: ` + vpn_role + \", \" + org_role + \", \" + user_role, ()=>{",
									"            pm.expect(res.roles).to.include(vpn_role);",
									"            pm.expect(res.roles).to.include(org_role);",
									"            pm.expect(res.roles).to.include(user_role);",
									"        });",
									"",
									"        pm.test(`User's Source is \"local\"`, ()=>{",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"",
									"        pm.test(`User's Contact Preferences remains not changed`, ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal(pm.collectionVariables.get('updatedContactPreference'));",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newEmail = pm.variables.replaceIn('{{$randomEmail}}')",
									"pm.collectionVariables.set('newEmail', newEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{newEmail}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(`User's Email remains not changed`, ()=>{",
									"            pm.expect(res.email).to.equal(pm.collectionVariables.get('newEmail'));",
									"        });",
									"        ",
									"        pm.test(`User's Last Name remains not changed`, ()=>{",
									"            pm.expect(res.lastName).to.equal(pm.collectionVariables.get('newLastName'));",
									"        });",
									"",
									"        pm.test(`User's First Name remains not changed`, ()=>{",
									"            pm.expect(res.firstName).to.equal(pm.collectionVariables.get('newFirstName'));",
									"        });",
									"",
									"",
									"        pm.test(`User's Phone remains not changed`, ()=>{",
									"            pm.expect(res.phone).to.equal(pm.collectionVariables.get('updatedPhoneNumber'));",
									"        });",
									"",
									"        pm.test(`User's Timezone remains not changed`, ()=>{",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('updatedTimeZone'));",
									"        });",
									"",
									"        pm.test(`User's Photo URL remains not changed`, ()=>{",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpn_role = pm.environment.get('vpn_role');",
									"        const org_role = pm.collectionVariables.get('org_role');",
									"        const user_role = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's role field includes: ` + vpn_role + \", \" + org_role + \", \" + user_role, ()=>{",
									"            pm.expect(res.roles).to.include(org_role);",
									"            pm.expect(res.roles).to.include(user_role);",
									"        });",
									"",
									"        pm.test(`User's Source is \"local\"`, ()=>{",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"",
									"        pm.test(`User's Contact Preferences remains not changed`, ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal(pm.collectionVariables.get('updatedContactPreference'));",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roles\":[\"{{org_role}}\", \"{{user_role}}\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-add vpn role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(`User's Email remains not changed`, ()=>{",
									"            pm.expect(res.email).to.equal(pm.collectionVariables.get('newEmail'));",
									"        });",
									"        ",
									"        pm.test(`User's Last Name remains not changed`, ()=>{",
									"            pm.expect(res.lastName).to.equal(pm.collectionVariables.get('newLastName'));",
									"        });",
									"",
									"        pm.test(`User's First Name remains not changed`, ()=>{",
									"            pm.expect(res.firstName).to.equal(pm.collectionVariables.get('newFirstName'));",
									"        });",
									"",
									"",
									"        pm.test(`User's Phone remains not changed`, ()=>{",
									"            pm.expect(res.phone).to.equal(pm.collectionVariables.get('updatedPhoneNumber'));",
									"        });",
									"",
									"        pm.test(`User's Timezone remains not changed`, ()=>{",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('updatedTimeZone'));",
									"        });",
									"",
									"        pm.test(`User's Photo URL remains not changed`, ()=>{",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpn_role = pm.environment.get('vpn_role');",
									"        const org_role = pm.collectionVariables.get('org_role');",
									"        const user_role = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's role field includes: ` + vpn_role + \", \" + org_role + \", \" + user_role, ()=>{",
									"            pm.expect(res.roles).to.include(org_role);",
									"            pm.expect(res.roles).to.include(user_role);",
									"            pm.expect(res.roles).to.include(vpn_role);",
									"",
									"        });",
									"",
									"        pm.test(`User's Source is \"local\"`, ()=>{",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"",
									"        pm.test(`User's Contact Preferences remains not changed`, ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal(pm.collectionVariables.get('updatedContactPreference'));",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roles\":[\"{{user_role}}\", \"{{org_role}}\", \"{{vpn_role}}\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user vpn_role is present in the roles list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUsers\")))",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    const targetUser = res.find(e => e.identifier.includes(pm.collectionVariables.get('userId')));   ",
									"        if (!targetUser) console.log(`The user with id: ${pm.collectionVariables.get('userId')} is not found.`);",
									"        ",
									"         pm.test(\"VPN role is present in the targer user roles list\", ()=>{",
									"            pm.expect(targetUser.roles).to.include(pm.environment.get('vpn_role'));",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change phoneNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"         pm.test(`User's Phone is changed to - ${pm.collectionVariables.get('newPhoneNumber')}`, ()=>{",
									"            pm.expect(res.phone).to.equal(pm.collectionVariables.get('newPhoneNumber'));",
									"        });",
									"        ",
									"        pm.test(`User's Email remains not changed`, ()=>{",
									"            pm.expect(res.email).to.equal(pm.collectionVariables.get('newEmail'));",
									"        });",
									"        ",
									"        pm.test(`User's Last Name remains not changed`, ()=>{",
									"            pm.expect(res.lastName).to.equal(pm.collectionVariables.get('newLastName'));",
									"        });",
									"",
									"        pm.test(`User's First Name remains not changed`, ()=>{",
									"            pm.expect(res.firstName).to.equal(pm.collectionVariables.get('newFirstName'));",
									"        });",
									"",
									"        pm.test(`User's Timezone remains not changed`, ()=>{",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('updatedTimeZone'));",
									"        });",
									"",
									"        pm.test(`User's Photo URL remains not changed`, ()=>{",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpn_role = pm.environment.get('vpn_role');",
									"        const org_role = pm.collectionVariables.get('org_role');",
									"        const user_role = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's role field includes: ` + vpn_role + \", \" + org_role + \", \" + user_role, ()=>{",
									"            pm.expect(res.roles).to.include(org_role);",
									"            pm.expect(res.roles).to.include(user_role);",
									"            pm.expect(res.roles).to.include(vpn_role);",
									"",
									"        });",
									"",
									"        pm.test(`User's Source is \"local\"`, ()=>{",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"",
									"        pm.test(`User's Contact Preferences remains not changed`, ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal(pm.collectionVariables.get('updatedContactPreference'));",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newPhoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
									"pm.collectionVariables.set('newPhoneNumber', newPhoneNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"{{newPhoneNumber}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change timeZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(`User's Timezone is changed to - ${pm.collectionVariables.get('newTimeZone')}`, ()=>{",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('newTimeZone'));",
									"        });",
									"        ",
									"        pm.test(`User's Phone remains not changed`, ()=>{",
									"            pm.expect(res.phone).to.equal(pm.collectionVariables.get('newPhoneNumber'));",
									"        });",
									"        ",
									"        pm.test(`User's Email remains not changed`, ()=>{",
									"            pm.expect(res.email).to.equal(pm.collectionVariables.get('newEmail'));",
									"        });",
									"        ",
									"        pm.test(`User's Last Name remains not changed`, ()=>{",
									"            pm.expect(res.lastName).to.equal(pm.collectionVariables.get('newLastName'));",
									"        });",
									"",
									"        pm.test(`User's First Name remains not changed`, ()=>{",
									"            pm.expect(res.firstName).to.equal(pm.collectionVariables.get('newFirstName'));",
									"        });",
									"",
									"        pm.test(`User's Photo URL remains not changed`, ()=>{",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpn_role = pm.environment.get('vpn_role');",
									"        const org_role = pm.collectionVariables.get('org_role');",
									"        const user_role = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's role field includes: ` + vpn_role + \", \" + org_role + \", \" + user_role, ()=>{",
									"            pm.expect(res.roles).to.include(org_role);",
									"            pm.expect(res.roles).to.include(user_role);",
									"            pm.expect(res.roles).to.include(vpn_role);",
									"",
									"        });",
									"",
									"        pm.test(`User's Source is \"local\"`, ()=>{",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"",
									"        pm.test(`User's Contact Preferences remains not changed`, ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal(pm.collectionVariables.get('updatedContactPreference'));",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timezone\": \"{{newTimeZone}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change contactPreferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", () => {",
									"            pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"",
									"        const res = pm.response.json();",
									"",
									"        pm.test(\"Contact Preferences\", () => {",
									"            pm.expect(res.contactPreferences).to.be.an('array').that.has.lengthOf(1);",
									"            pm.expect(res.contactPreferences[0]).to.equal('Technical_Notifications');",
									"        });",
									"",
									"        pm.test(`User's Timezone remains unchanged`, () => {",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('newTimeZone'));",
									"        });",
									"",
									"        const newPhoneNumber = pm.collectionVariables.get('newPhoneNumber');",
									"        const newEmail = pm.collectionVariables.get('newEmail');",
									"        const newLastName = pm.collectionVariables.get('newLastName');",
									"        const newFirstName = pm.collectionVariables.get('newFirstName');",
									"",
									"        pm.test(\"User's Phone remains unchanged\", () => {",
									"            pm.expect(res.phone).to.equal(newPhoneNumber);",
									"        });",
									"",
									"        pm.test(\"User's Email remains unchanged\", () => {",
									"            pm.expect(res.email).to.equal(newEmail);",
									"        });",
									"",
									"        pm.test(\"User's Last Name remains unchanged\", () => {",
									"            pm.expect(res.lastName).to.equal(newLastName);",
									"        });",
									"",
									"        pm.test(\"User's First Name remains unchanged\", () => {",
									"            pm.expect(res.firstName).to.equal(newFirstName);",
									"        });",
									"",
									"        pm.test(\"User's Photo URL remains unchanged\", () => {",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpnRole = pm.environment.get('vpn_role');",
									"        const orgRole = pm.collectionVariables.get('org_role');",
									"        const userRole = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's Roles include: ${vpnRole}, ${orgRole}, ${userRole}`, () => {",
									"            pm.expect(res.roles).to.include(orgRole);",
									"            pm.expect(res.roles).to.include(userRole);",
									"            pm.expect(res.roles).to.include(vpnRole);",
									"        });",
									"",
									"        pm.test(\"User's Source is 'local'\", () => {",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contactPreferences\": [\"Technical_Notifications\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-reset contactPreferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(\"Contact Preferences is empty.\", () => {",
									"            pm.expect(res.contactPreferences).to.be.empty;",
									"        });",
									"",
									"        pm.test(`User's Timezone remains unchanged`, () => {",
									"            pm.expect(res.timezone).to.equal(pm.collectionVariables.get('newTimeZone'));",
									"        });",
									"",
									"        const newPhoneNumber = pm.collectionVariables.get('newPhoneNumber');",
									"        const newEmail = pm.collectionVariables.get('newEmail');",
									"        const newLastName = pm.collectionVariables.get('newLastName');",
									"        const newFirstName = pm.collectionVariables.get('newFirstName');",
									"",
									"        pm.test(\"User's Phone remains unchanged\", () => {",
									"            pm.expect(res.phone).to.equal(newPhoneNumber);",
									"        });",
									"",
									"        pm.test(\"User's Email remains unchanged\", () => {",
									"            pm.expect(res.email).to.equal(newEmail);",
									"        });",
									"",
									"        pm.test(\"User's Last Name remains unchanged\", () => {",
									"            pm.expect(res.lastName).to.equal(newLastName);",
									"        });",
									"",
									"        pm.test(\"User's First Name remains unchanged\", () => {",
									"            pm.expect(res.firstName).to.equal(newFirstName);",
									"        });",
									"",
									"        pm.test(\"User's Photo URL remains unchanged\", () => {",
									"            pm.expect(res.photoUrl).to.equal(pm.collectionVariables.get('updatedPhotoUrl'));",
									"        });",
									"",
									"        const vpnRole = pm.environment.get('vpn_role');",
									"        const orgRole = pm.collectionVariables.get('org_role');",
									"        const userRole = pm.collectionVariables.get('user_role');",
									"",
									"        pm.test(`User's Roles include: ${vpnRole}, ${orgRole}, ${userRole}`, () => {",
									"            pm.expect(res.roles).to.include(orgRole);",
									"            pm.expect(res.roles).to.include(userRole);",
									"            pm.expect(res.roles).to.include(vpnRole);",
									"        });",
									"",
									"        pm.test(\"User's Source is 'local'\", () => {",
									"            pm.expect(res.identitySource).to.equal(\"local\");",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contactPreferences\": []\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    if (pm.response.to.have.status(204)) {",
									"",
									"        pm.test(\"Response does not contain a body\", ()=>{",
									"            pm.response.to.not.have.body();",
									"            });",
									"        ",
									"        pm.test(\"Content-Type header is application/json\", () => {",
									"            pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user in another org with max field length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    if (pm.response.to.have.status(201)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"",
									"        const res = pm.response.json();",
									"        pm.collectionVariables.set('userId', res.identifier);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {",
									"    if (!minValue) {",
									"        minValue = 128;",
									"        maxValue = 128;",
									"    }",
									"",
									"    if (!maxValue) {",
									"        maxValue = minValue;",
									"    }",
									"",
									"    let length = _.random(minValue, maxValue),",
									"        randomString = \"\";",
									"",
									"    for (let i = 0; i < length; i++)",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
									"    return randomString;",
									"}",
									"",
									"pm.collectionVariables.set('randomString128', randomString());",
									"// console.log(pm.collectionVariables.get('randomString128'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{ZTEC}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{randomString128}}\",\n  \"firstName\": \"{{longFirstName}}\",\n  \"lastName\": \"{{longLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{group}}\", \"{{technician}}\", \"{{user_role}}\", \"{{org_role}}\"\n  ],\n  \"phone\": \"{{longPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\",\n  \"contactPreferences\": [\n    \"Primary_Contact\"\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						},
						"description": "The aim of this request is to test the ability to save the data with a maximum number of characters:\n\n*   username - 128;\n*   firstName - 255;\n*   lastName - 255;\n*   phoneNumber - 32."
					},
					"response": []
				},
				{
					"name": "user from another organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    if (pm.response.to.have.status(204)) {",
									"",
									"        pm.test(\"Response does not contain a body\", ()=>{",
									"            pm.response.to.not.have.body();",
									"            });",
									"        ",
									"        pm.test(\"Content-Type header is application/json\", () => {",
									"            pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{ZTEC}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user min field length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('\"Status code is 201 or 409\"', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 409])",
									"    ",
									"    const statusCode = pm.response.code",
									"",
									"    if (statusCode == 201) {",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        const res = pm.response.json();",
									"        pm.collectionVariables.set('userId', res.identifier);",
									"    } if (statusCode == 409) {",
									"        console.log('User with this username already created.')",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {",
									"    if (!minValue) {",
									"        minValue = 1;",
									"        maxValue = 1;",
									"    }",
									"",
									"    if (!maxValue) {",
									"        maxValue = minValue;",
									"    }",
									"",
									"    let length = _.random(minValue, maxValue),",
									"        randomString = \"\";",
									"",
									"    for (let i = 0; i < length; i++)",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
									"    return randomString;",
									"}",
									"",
									"pm.collectionVariables.set('randomString1', randomString());",
									"// console.log(pm.collectionVariables.get('randomString1'));",
									"",
									"",
									"//  pm.sendRequest({",
									"//     url: pm.environment.get('baseURI')+'/v1/users/'+ pm.collectionVariables.get('userId'),",
									"//     method: 'DELETE',",
									"//     header:{'X-Organization-Id': pm.collectionVariables.get('x-organization-id')},",
									"//     header:{'Authorization': 'Bearer'+ pm.collectionVariables.get('token')}",
									"//     },",
									"// (err,res) => {(err,res)",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{randomString1}}\",\n  \"firstName\": \"{{randomString1}}\",\n  \"lastName\": \"{{randomString1}}\",\n  \"email\": \"test_delete@i.net\",\n  \"roles\":[\n          \"{{user_role}}\"\n  ],\n  \"phone\": \"2\",\n  \"timezone\": \"{{myTimeZone}}\",\n  \"contactPreferences\": [\n    \"Primary_Contact\"\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						},
						"description": "The aim of this request is to test the ability to save the data with a maximum number of characters:\n\n*   username - 128;\n*   firstName - 255;\n*   lastName - 255;\n*   phoneNumber - 32."
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204 or 404', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404])",
									"    ",
									"    const statusCode = pm.response.code",
									"    if (statusCode == 204) {",
									"        pm.test(\"Response does not contain a body\", ()=>{",
									"            pm.response.to.not.have.body();",
									"            });",
									"        ",
									"        pm.test(\"Content-Type header is application/json\", () => {",
									"            pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"        });",
									"    }",
									"    else if (statusCode == 404) {",
									"        console.log(\"User Not Found.\")",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "self-change firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"",
									"        const res = pm.response.json();",
									"        const roles = res.roles;",
									"",
									"        pm.test(\"Check user roles\", ()=>{",
									"            const myUserRoles = JSON.parse(pm.collectionVariables.get('myUserRoles'));",
									"            const rolesCount = (myUserRoles).length;",
									"            for (let i = 0; i < rolesCount; i++){",
									"                 pm.expect(roles).to.include(myUserRoles[i]);",
									"                 console.log(myUserRoles[i]);",
									"            }",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" const sendRequest = (req) => {",
									"        return new Promise((resolve, reject) => {",
									"            pm.sendRequest(req, (err, res) => {",
									"                if (err) {",
									"                    return reject(err);",
									"                }",
									"                return resolve(res.json());",
									"                });",
									"        });",
									"    };",
									"",
									"const getMyUser = {",
									"    url: pm.environment.get('baseURI') + '/v1/users',",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': 'Bearer ' + pm.environment.get('token'),",
									"        'X-Organization-Id': pm.environment.get('x-organization-id') ",
									"    }",
									"}",
									"  ",
									"pm.sendRequest(getMyUser, (er, res) => {",
									"    const usersList = res.json();",
									"    const myUser = usersList.find(e => e.identifier.includes(pm.environment.get('myUserId')));",
									"    pm.collectionVariables.set('myUserFirstName', myUser.firstName);",
									"    pm.collectionVariables.set('myUserLastName', myUser.lastName);",
									"    pm.collectionVariables.set('myUserEmail', myUser.email);",
									"    pm.collectionVariables.set('myUserPhoneNumber', myUser.phone);",
									"    pm.collectionVariables.set('myUserTimezone', myUser.timezone);",
									"    pm.collectionVariables.set('myUserPhotoUrl', myUser.photoUrl);",
									"    pm.collectionVariables.set('myUserSource', myUser.identitySource);",
									"    pm.collectionVariables.set('myUserContactPreferenses', myUser.contactPreferences);",
									"    ",
									"    let myUserRoles = [];",
									"    let roleCount = (myUser.roles).length;",
									"    for (let i = 0; i < roleCount; i++) {",
									"       myUserRoles.push(myUser.roles[i]);",
									"    }",
									"    pm.collectionVariables.set('myUserRoles', JSON.stringify(myUserRoles));",
									"});",
									"   ",
									"",
									"",
									"",
									"",
									"// \"1928b8a7-b473-4d5f-9de3-30cdd4c8a0a2\"",
									"",
									"",
									"",
									"",
									"// const res = pm.response.json();",
									"//     const targetUser = res.find(e => e.identifier.includes(pm.collectionVariables.get('userId')));   ",
									"//         if (!targetUser) console.log(`The user with id: ${pm.collectionVariables.get('userId')} is not found.`);",
									"        ",
									"//          pm.test(\"VPN role is present in the targer user roles list\", ()=>{",
									"//             pm.expect(targetUser.roles).to.include(pm.environment.get('vpn_role'));",
									"//         });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Oleksandr\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{myUserId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{myUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "self-change lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lastName\": \"Kalyna\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{myUserId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{myUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "self-change email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-Password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"oleksadnr.kalyna@mev.com\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{myUserId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{myUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "self-change phoneNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"{{$randomPhoneNumber}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{myUserId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{myUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "self-change timeZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(\"User Time Zone is changed\", ()=>{",
									"            pm.expect(res.timezone).to.not.equal(pm.collectionVariables.get('userTimeZone'));",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timezone\": \"{{newTimeZone}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{myUserId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{myUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "self-change photoUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(\"User First Name is changed\", ()=>{",
									"            pm.expect(res.firstName).to.not.equal(pm.collectionVariables.get('userFirstName'));",
									"        });",
									"",
									"        console.log(pm.collectionVariables.get('userFirstName'))",
									"",
									"        pm.test(\"User Last Name is changed\", ()=>{",
									"            pm.expect(res.lastName).to.not.equal(pm.collectionVariables.get('userLastName'));",
									"        });",
									"",
									"        pm.test(\"User Email is changed\", ()=>{",
									"            pm.expect(res.email).to.not.equal(pm.collectionVariables.get('userEmail'));",
									"        });",
									"",
									"        pm.test(\"User Phone number is changed\", ()=>{",
									"            pm.expect(res.phone).to.not.equal(pm.collectionVariables.get('userPhoneNumber'));",
									"        });",
									"",
									"        pm.test(\"User Time Zone is changed\", ()=>{",
									"            pm.expect(res.timezone).to.not.equal(pm.collectionVariables.get('userTimeZone'));",
									"        });",
									"",
									"        pm.test(\"User Photo Url is changed\", ()=>{",
									"            pm.expect(res.photoUrl).to.not.equal(pm.collectionVariables.get('userPhotoUrl'));",
									"        });",
									"",
									"        pm.test(\"User main Role is changed\", ()=>{",
									"            pm.expect(res.roles[0]).to.not.equal(pm.collectionVariables.get('userMainRole'));",
									"        });",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "06af9652-5934-4a8b-a2b3-b403b805d028",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"photoUrl\": \"{{changedPhotoUrl}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{myUserId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{myUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "self-change contactPreferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"            });",
									"        ",
									"        const res = pm.response.json();",
									"",
									"        pm.test(\"Contact Preferences is changed\", ()=>{",
									"            pm.expect(res.contactPreferences[0]).to.equal('Technical_Notifications');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contactPreferences\": [\"Technical_Notifications\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{myUserId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{myUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_mfa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUserMFA\")));",
									"            });",
									"        const res = pm.response.json();",
									"",
									"    ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users/:userId/mfa",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								":userId",
								"mfa"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{myUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_mfa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    if (pm.response.to.have.status(201)) {",
									"",
									"        pm.test(\"Response schema validation\", ()=>{",
									"            pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUserMFA\")));",
									"            });",
									"        const res = pm.response.json();",
									"",
									"    ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"oleksandr.kalyna@mev.com\",\n  \"mfaEnabled\": null,\n  \"confirmationCode\": null\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/:userId/mfa",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								":userId",
								"mfa"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{myUserId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "connections_v2",
			"item": [
				{
					"name": "v1/fix/connections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", () => {",
									" if (pm.response.to.have.status(200)) {",
									"",
									"    let res = pm.response.json();",
									"    let awsConnectionId = pm.environment.get('awsConnectionId');",
									"    let azureConnectionId = pm.environment.get('azureConnectionId');",
									"    let gcpConnectionId = pm.environment.get('gcpConnectionId');",
									"    let ociConnectionId = pm.environment.get('ociConnectionId');",
									"    let internetConnectionId = pm.environment.get('internetConnectionId');",
									"    let interRegionConnectionId = pm.environment.get('interRegionConnectionId');",
									"    let privateTelcoConnectionId = pm.environment.get('privateTelcoConnectionId');",
									"    let privateSDNConnectionId = pm.environment.get('privateSDNConnectionId');",
									"    let privateBackBoneConnectionId = pm.environment.get('privateBackBoneConnectionId');",
									"    let privateIntrafacilityConnectionId = pm.environment.get('privateIntrafacilityConnectionId');",
									"    ",
									"    pm.test(`Aws сonnection with id: ${pm.environment.get('awsConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === awsConnectionId);",
									"            pm.expect(awsConnectionId === undefined);",
									"        });",
									"",
									"    pm.test(`Azure сonnection with id: ${pm.environment.get('azureConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === azureConnectionId);",
									"            pm.expect(azureConnectionId === undefined)",
									"        });",
									"",
									"    pm.test(`Gcp сonnection with id: ${pm.environment.get('gcpConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === gcpConnectionId);",
									"            pm.expect(gcpConnectionId === undefined)",
									"        });",
									"",
									"    pm.test(`Oci сonnection with id: ${pm.environment.get('ociConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === ociConnectionId);",
									"            pm.expect(ociConnectionId === undefined)",
									"        });",
									"",
									"    pm.test(`Internet сonnection with id: ${pm.environment.get('internetConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === internetConnectionId);",
									"            pm.expect(internetConnectionId === undefined)",
									"        });",
									"",
									"    pm.test(`Inter Region сonnection with id: ${pm.environment.get('interRegionConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === interRegionConnectionId);",
									"            pm.expect(interRegionConnectionId === undefined)",
									"        });",
									"",
									"    pm.test(`Private Telco сonnection with id: ${pm.environment.get('privateTelcoConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === privateTelcoConnectionId);",
									"            pm.expect(privateTelcoConnectionId) === undefined",
									"        });",
									"",
									"    pm.test(`Private SDN сonnection with id: ${pm.environment.get('privateSDNConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === privateSDNConnectionId);",
									"            pm.expect(privateSDNConnectionId === undefined)",
									"        });",
									"",
									"    pm.test(`Private Intra Facility сonnection with id: ${pm.environment.get('privateIntrafacilityConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === privateIntrafacilityConnectionId);",
									"            pm.expect(privateIntrafacilityConnectionId === undefined)",
									"        });",
									"",
									"    pm.test(`Private Back Bone сonnection with id: ${pm.environment.get('privateBackBoneConnectionId')} is Not on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === privateBackBoneConnectionId);",
									"            pm.expect(privateBackBoneConnectionId) === undefined",
									"        });",
									"",
									"    }",
									"    else console.log(\"Some errors occured.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{ZSTO}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/fix/connections",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"fix",
								"connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "v1/fix/connections-aws",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", () => {",
									" if (pm.response.to.have.status(202)) {",
									"     ",
									"     pm.test(\"Response schema validation\", () => {",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaFixConnectionAws\")));",
									"    });",
									"",
									"    let res = pm.response.json();",
									"",
									"    pm.environment.set('awsConnectionId', res.identifier);",
									"    pm.environment.set('awsConnectionBandwidth', res.connectionData.bandwidth)",
									"",
									"    pm.test(\"Check connectionType\", () => {",
									"        pm.expect(res.connectionType).to.be.equal('cloud')",
									"    });",
									"",
									"    pm.test(\"Check providerRegion\", () => {",
									"        pm.expect(res.connectionData.providerRegion).to.be.equal(pm.collectionVariables.get('awsRegion'))",
									"    });",
									"",
									"    pm.test(\"Check bandwidth\", () => {",
									"        pm.expect(res.connectionData.bandwidth).to.be.equal(pm.collectionVariables.get('randomAwsBandwidth'))",
									"        });",
									"",
									"    pm.test(\"Check factionLocation\", () => {",
									"        pm.expect(res.connectionData.factionLocations[0]).to.be.equal(pm.collectionVariables.get('factionLocation'))",
									"        });",
									"",
									"    pm.test(\"Check bandwidthUnits\", () => {",
									"        pm.expect(res.connectionData.bandwidthUnits).to.be.equal('gbps')",
									"        });",
									"",
									"    pm.test(\"Check connectionSubType\", () => {",
									"        pm.expect(res.connectionData.connectionSubType).to.be.equal('aws_direct_connect')",
									"        });",
									"",
									"    pm.test(\"Check 'active' field\", () => {",
									"        pm.expect(res.active).to.be.equal(true)",
									"        });",
									"    ",
									"    pm.test(\"Check status field\", () => {",
									"        pm.expect(res.state).to.be.equal('Provisioning')",
									"        });",
									"",
									"    pm.test(\"'crossCloud' in 'requestedChanges' is set to false\", () => {",
									"        pm.expect(res.requestedChanges[0].crossCloud).to.be.equal(false)",
									"        });",
									"    }",
									"    else console.log(\"Some errors occur over the cloud connection creation.\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set (\"randomAwsBandwidth\", _.random (1,40));",
									"",
									"var awsRegions = [\"us-east-2\", \"us-east-1\", \"us-west-1\", \"us-west-2\", \"eu-central-1\", \"eu-west-2\"];",
									"",
									"pm.collectionVariables.set(\"awsRegions\", awsRegions);",
									"pm.collectionVariables.set(\"awsRegion\", awsRegions[Math.floor(Math.random() * awsRegions.length)]);",
									"",
									"var factionLocations = [\"CHI1\", \"FR7\", \"ATL1\"];",
									"",
									"pm.collectionVariables.set(\"factionLocation\", factionLocations[Math.floor(Math.random() * factionLocations.length)]);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n       \"connectionType\": \"cloud\",\n       \"connectionData\": {\n           \"connectionSubType\": \"aws_direct_connect\",\n           \"factionLocations\": [\n               \"{{factionLocation}}\"\n               ],\n           \"providerRegion\": \"{{awsRegion}}\",\n           \"bandwidth\": {{randomAwsBandwidth}},\n           \"crossCloud\": false,\n           \"accountId\": \"{{$randomUUID}}\"\n           }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/fix/connections",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"fix",
								"connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "set ticket to CLosed state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"        const res = pm.response.json();",
									"        const state = res.result.state;",
									"",
									"        pm.test('Check the state changed to 3 \"Closed\".', () => {",
									"            pm.expect(state).to.equal('3');",
									"            });",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getTicketToCloseSysId = {",
									"    url: pm.environment.get('sNowBaseURI') + '/api/239912/impersonation/tasks?limit=1',",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': 'Bearer ' + pm.environment.get('sNowToken'),",
									"        'x-organization': pm.environment.get('x-organization-id') ",
									"    }",
									"}",
									"  ",
									"pm.sendRequest(getTicketToCloseSysId, (error, response) => {",
									"    const res = response.json();",
									"    pm.collectionVariables.set('ticketToCloseSysId', res.result[0].sys_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sNowToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-organization",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-WantSessionDebugMessages",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"state\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sNowBaseURI}}/{{impersonation}}/sn_customerservice_case/:caseId?user_id={{sNowUserId}}",
							"host": [
								"{{sNowBaseURI}}"
							],
							"path": [
								"{{impersonation}}",
								"sn_customerservice_case",
								":caseId"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{sNowUserId}}"
								}
							],
							"variable": [
								{
									"key": "caseId",
									"value": "{{ticketToCloseSysId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check connection presence on the list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", () => {",
									" if (pm.response.to.have.status(200)) {",
									"     ",
									"",
									"    let res = pm.response.json();",
									"    let awsConnectionId = pm.environment.get('awsConnectionId');",
									"    ",
									"    pm.test(`Aws сonnection with id: ${pm.environment.get('awsConnectionId')} is on the list`, () => {",
									"            id = res.filter(obj => obj.identifier === awsConnectionId);",
									"            pm.expect(id[0].identifier).to.eql(awsConnectionId)",
									"        });",
									"    ",
									"    pm.test('Check factionLocations is array and not empty', () => {",
									"            id = res.filter(obj => obj.identifier === awsConnectionId);",
									"            pm.expect(id[0].connectionData.factionLocations).to.be.an('array').that.is.not.empty;",
									"        });",
									"",
									"",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "b904f84c-48bd-47ea-988e-7bcfd8a94251",
								"description": "DontTouch company",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseURI}}/v1/fix/connections",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"fix",
								"connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "aws CREATED ticket check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        const res = pm.response.json();",
									"        const targetTicket = res.find(e => e.title.includes(pm.environment.get('awsConnectionId')));",
									"        const connectionTicketTitle =  'New connection request - ORG: ZSTO, ID: ' + pm.environment.get('awsConnectionId') + ', DC: ' + pm.collectionVariables.get('factionLocation') + ', FIX: aws_direct_connect, BW: ' + pm.collectionVariables.get('randomAwsBandwidth');",
									"        ",
									"        if (!targetTicket) console.log(\"The ticket for created connection is not found.\");",
									"        ",
									"        pm.collectionVariables.set('createConnectionTicketNumber', targetTicket.number);",
									"            ",
									"        pm.test(`Check ticket for CREATED connection: ${pm.environment.get('awsConnectionId')}`, () => {",
									"            pm.expect(targetTicket.title).to.be.eql(connectionTicketTitle);",
									"        }); ",
									"",
									"        pm.test(\"Check ticket description to include 'Cross-Cloud Connectivity: True'\", () => {",
									"            pm.expect(targetTicket.description).to.include('Cross-Cloud Connectivity: False');",
									"        }); ",
									"",
									"        pm.test(`Ticket state for: ${pm.environment.get('awsConnectionId')} should be \"Closed\"`, () => {",
									"            pm.expect(targetTicket.state).to.be.eql(\"Closed\");",
									"        }); ",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets"
							],
							"query": [
								{
									"key": "ticketStatusFilter",
									"value": "new",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "In progress",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "On hold",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "Cancelled",
									"description": "+",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "Resolved",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "closed",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "9",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"disabled": true
								},
								{
									"key": "sortDirection",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "sortField",
									"value": "lastUpdated",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "v1/fix/connections/conId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									" if (pm.response.code == 200) {",
									"     pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaFixConnectionCloud\")));",
									"        });",
									"     ",
									"     let res = pm.response.json();",
									"",
									"     pm.test(\"Check connection identifier in the response\", () => {",
									"        pm.expect(res.identifier).to.be.equal(pm.environment.get('awsConnectionId'))",
									"        });",
									"",
									"    pm.test(\"Check bandwidth\", () => {",
									"        pm.expect(res.connectionData.bandwidth).to.be.equal(pm.environment.get('awsConnectionBandwidth'))",
									"        });",
									"",
									"    pm.test(\"Check providerRegion\", () => {",
									"        pm.expect(res.providerRegion).to.be.equal(pm.environment.get('awsRegion'))",
									"    });",
									"",
									"    pm.test(\"Check factionLocation\", () => {",
									"        pm.expect(res.factionLocation).to.be.equal(pm.environment.get('factionLocation'))",
									"        });",
									"",
									"    pm.test(\"Check 'active' field\", () => {",
									"        pm.expect(res.active).to.be.equal(true)",
									"        });",
									"    ",
									"    pm.test(\"Check state field\", () => {",
									"        pm.expect(res.state).to.be.equal('Provisioning')",
									"        });",
									"    }",
									"    else {console.log(\"Some errors occur over the cloud connection checking.\")}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{oleksTest}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-OrganizationId",
								"value": "b904f84c-48bd-47ea-988e-7bcfd8a94251",
								"description": "DontTouch company",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-OrganizationId",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/fix/connections/{{awsConnectionId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"fix",
								"connections",
								"{{awsConnectionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "v1/fix/connections-AWS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let bandwidth = pm.environment.get('awsConnectionBandwidth');",
									"if (bandwidth == 10){",
									"    pm.collectionVariables.set('changedAwsBandwidth', 3);",
									"} else {pm.collectionVariables.set('changedAwsBandwidth', 10)};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 202) {",
									"     ",
									"     pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaFixConnectionAws\")));",
									"    });",
									"",
									"    let res = pm.response.json();",
									"",
									"    pm.test(\"Check Cross-Cloud changes\", () => {",
									"        pm.expect(res.requestedChanges[0].crossCloud).to.be.equal(true)",
									"        });",
									"",
									"    pm.test(\"Check bandwidth changes\", () => {",
									"        pm.expect(res.requestedChanges[1].bandwidth).to.be.equal(pm.collectionVariables.get('changedAwsBandwidth'))",
									"        });",
									"",
									"    pm.test(\"Check factionLocation\", () => {",
									"        pm.expect(res.factionLocation).to.be.equal(pm.environment.get('factionLocation'))",
									"        });",
									"",
									"    pm.test(\"Check 'active' field\", () => {",
									"        pm.expect(res.active).to.be.equal(true)",
									"        });",
									"    ",
									"    pm.test(\"Check state field\", () => {",
									"        pm.expect(res.state).to.be.equal('Provisioning')",
									"        });",
									"    }",
									"if(pm.response.code === 400) ",
									"    {console.log(\"Bad request or your connection is inactive.\")}",
									"// else {console.log(\"Somthing went wrong with your request\")}",
									"   ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bandwidth\": {{changedAwsBandwidth}},\n    \"crossCloud\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/fix/connections/{{awsConnectionId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"fix",
								"connections",
								"{{awsConnectionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set ticket to CLosed state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"        const res = pm.response.json();",
									"        const state = res.result.state;",
									"",
									"        pm.test('Check the state changed to 3 \"Closed\".', () => {",
									"            pm.expect(state).to.equal('3');",
									"            });",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getTicketToCloseSysId = {",
									"    url: pm.environment.get('sNowBaseURI') + '/api/239912/impersonation/tasks?limit=1',",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': 'Bearer ' + pm.environment.get('sNowToken'),",
									"        'x-organization': pm.environment.get('x-organization-id') ",
									"    }",
									"}",
									"  ",
									"pm.sendRequest(getTicketToCloseSysId, (error, response) => {",
									"    const res = response.json();",
									"    pm.collectionVariables.set('ticketToCloseSysId', res.result[0].sys_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sNowToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-organization",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-WantSessionDebugMessages",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"state\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sNowBaseURI}}/{{impersonation}}/sn_customerservice_case/:caseId?user_id={{sNowUserId}}",
							"host": [
								"{{sNowBaseURI}}"
							],
							"path": [
								"{{impersonation}}",
								"sn_customerservice_case",
								":caseId"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{sNowUserId}}"
								}
							],
							"variable": [
								{
									"key": "caseId",
									"value": "{{ticketToCloseSysId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "aws UPDATED  ticket check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        const res = pm.response.json();",
									"        const targetTicket = res.find(e => e.title.includes(pm.environment.get('awsConnectionId')) && e.number !== pm.collectionVariables.get('createConnectionTicketNumber'));",
									"        ",
									"        // const connectionTicketTitle need to be refactored after enpoint implementation",
									"        const connectionTicketTitle =  'Update connection request - ORG: ZSTO, CON: ' + pm.environment.get('awsConnectionId') + ', DC: ' + pm.collectionVariables.get('factionLocation') + ', FIX: aws_direct_connect, BW: ' + pm.collectionVariables.get('changedAwsBandwidth');",
									"        ",
									"        if (!targetTicket) console.log(\"The ticket for updated connection is not found.\");",
									"",
									"        pm.collectionVariables.set('updateConnectionTicketNumber', targetTicket.number)",
									"            ",
									"        pm.test(`Check ticket for UPDATED connection: ${pm.environment.get('awsConnectionId')}`, () => {",
									"            pm.expect(targetTicket.title).to.include(connectionTicketTitle);",
									"        }); ",
									"",
									"        pm.test('Check ticket description updates texts ', () => {",
									"            let arr = JSON.parse(pm.collectionVariables.get('changedRequestTexts'));",
									"            arr.forEach((x) => {",
									"            pm.expect(targetTicket.description).to.include(x);",
									"            });",
									"        }); ",
									"        ",
									"        pm.test(`Ticket state for: ${pm.environment.get('awsConnectionId')} should be \"Closed\"`, () => {",
									"            pm.expect(targetTicket.state).to.be.eql(\"Closed\");",
									"        });  ",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets"
							],
							"query": [
								{
									"key": "ticketStatusFilter",
									"value": "new",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "In progress",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "On hold",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "Cancelled",
									"description": "+",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "Resolved",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "closed",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "9",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"disabled": true
								},
								{
									"key": "sortDirection",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "sortField",
									"value": "lastUpdated",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check updated bandwidth and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", () => {",
									" if (pm.response.to.have.status(200)) {",
									"     pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaFixConnectionCloud\")));",
									"        });",
									"     ",
									"     let res = pm.response.json();",
									"",
									"     pm.test(\"Check connection identifier in the response\", () => {",
									"        pm.expect(res.identifier).to.be.equal(pm.environment.get('awsConnectionId'))",
									"        });",
									"",
									"     pm.test(\"Check Cross-Cloud changes\", () => {",
									"        pm.expect(res.requestedChanges[0].crossCloud).to.be.equal(true)",
									"        });",
									"",
									"    pm.test(\"Check bandwidth changes\", () => {",
									"        pm.expect(res.requestedChanges[1].bandwidth).to.be.equal(pm.collectionVariables.get('changedAwsBandwidth'))",
									"        });",
									"",
									"    pm.test(\"Check providerRegion\", () => {",
									"        pm.expect(res.providerRegion).to.be.equal(pm.environment.get('awsRegion'))",
									"    });",
									"",
									"    pm.test(\"Check factionLocation\", () => {",
									"        pm.expect(res.factionLocation).to.be.equal(pm.environment.get('factionLocation'))",
									"        });",
									"",
									"    pm.test(\"Check 'active' field\", () => {",
									"        pm.expect(res.active).to.be.equal(true)",
									"        });",
									"    ",
									"    pm.test(\"Check state field\", () => {",
									"        pm.expect(res.state).to.be.equal('Provisioning')",
									"        });",
									"    }",
									"    else {console.log(\"Some errors occur over the cloud connection checking.\")}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{oleksTest}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/fix/connections/{{awsConnectionId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"fix",
								"connections",
								"{{awsConnectionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "v1/fix/connections-AWS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 202\", () => {",
									" if (pm.response.to.have.status(202)) {",
									"     ",
									"     pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaFixConnectionAws\")));",
									"    });",
									"",
									"    let res = pm.response.json();",
									"",
									"    pm.test(\"Check identifier\", () => {",
									"        pm.expect(res.identifier).to.be.equal(pm.environment.get('awsConnectionId'))",
									"    });",
									"",
									"    pm.test(\"Check 'active' field\", () => {",
									"        pm.expect(res.active).to.be.equal(false)",
									"        });",
									"    ",
									"    pm.test(\"Check state field\", () => {",
									"        pm.expect(res.state).to.be.equal('Provisioning')",
									"        });",
									"",
									"   pm.test(\"Check 'requesType' field is set to 'delete'\", () => {",
									"        pm.expect(res.requestedChanges[0].requestType).to.be.equal('delete')",
									"        });",
									"    }",
									"    else console.log(\"Some errors occur over the cloud connection deletion.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/fix/connections/{{awsConnectionId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"fix",
								"connections",
								"{{awsConnectionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "set ticket to CLosed state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    if (pm.response.to.have.status(200)) {",
									"        const res = pm.response.json();",
									"        const state = res.result.state;",
									"",
									"        pm.test('Check the state changed to 3 \"Closed\".', () => {",
									"            pm.expect(state).to.equal('3');",
									"            });",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getTicketToCloseSysId = {",
									"    url: pm.environment.get('sNowBaseURI') + '/api/239912/impersonation/tasks?limit=1',",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': 'Bearer ' + pm.environment.get('sNowToken'),",
									"        'x-organization': pm.environment.get('x-organization-id') ",
									"    }",
									"}",
									"  ",
									"pm.sendRequest(getTicketToCloseSysId, (error, response) => {",
									"    const res = response.json();",
									"    pm.collectionVariables.set('ticketToCloseSysId', res.result[0].sys_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sNowToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-organization",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-WantSessionDebugMessages",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"state\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sNowBaseURI}}/{{impersonation}}/sn_customerservice_case/:caseId?user_id={{sNowUserId}}",
							"host": [
								"{{sNowBaseURI}}"
							],
							"path": [
								"{{impersonation}}",
								"sn_customerservice_case",
								":caseId"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{sNowUserId}}"
								}
							],
							"variable": [
								{
									"key": "caseId",
									"value": "{{ticketToCloseSysId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "aws DELETED  ticket check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    if (pm.response.to.have.status(200)) {",
									"",
									"        const res = pm.response.json();",
									"        const targetTicket = res.find(e => e.title.includes(pm.environment.get('awsConnectionId')) && e.number !== pm.collectionVariables.get('createConnectionTicketNumber') && e.number !== pm.collectionVariables.get('updateConnectionTicketNumber'));",
									"        ",
									"        const connectionTicketTitle =  'Request for connection delete - ORG: ZSTO, ID: ' + pm.environment.get('awsConnectionId') + ', DC: ' + pm.collectionVariables.get('factionLocation') + ', FIX: aws_direct_connect, BW: ' + pm.collectionVariables.get('randomAwsBandwidth');",
									"        ",
									"        if (!targetTicket) console.log(\"The ticket for updated connection is not found.\");",
									"        ",
									"        ",
									"        pm.test(`Check ticket for UPDATED connection: ${pm.environment.get('awsConnectionId')}`, () => {",
									"            pm.expect(targetTicket.title).to.include(connectionTicketTitle);",
									"        });",
									"",
									"        pm.test(`Ticket state for: ${pm.environment.get('awsConnectionId')} should be \"Closed\"`, () => {",
									"            pm.expect(targetTicket.state).to.be.eql(\"Closed\");",
									"        });  ",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets"
							],
							"query": [
								{
									"key": "ticketStatusFilter",
									"value": "new",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "In progress",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "On hold",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "Cancelled",
									"description": "+",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "Resolved",
									"disabled": true
								},
								{
									"key": "ticketStatusFilter",
									"value": "closed",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "9",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"disabled": true
								},
								{
									"key": "sortDirection",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "sortField",
									"value": "lastUpdated",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check updated bandwidth and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", () => {",
									" if (pm.response.to.have.status(200)) {",
									"     pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaFixConnectionCloud\")));",
									"        });",
									"     ",
									"     let res = pm.response.json();",
									"",
									"     pm.test(\"Check connection identifier in the response\", () => {",
									"        pm.expect(res.identifier).to.be.equal(pm.environment.get('awsConnectionId'))",
									"        });",
									"",
									"    pm.test(\"Check bandwidth\", () => {",
									"        pm.expect(res.connectionData.bandwidth).to.be.equal(pm.environment.get('awsConnectionBandwidth'))",
									"        });",
									"",
									"    pm.test(\"Check providerRegion\", () => {",
									"        pm.expect(res.providerRegion).to.be.equal(pm.environment.get('awsRegion'))",
									"    });",
									"",
									"",
									"    pm.test(\"Check factionLocation\", () => {",
									"        pm.expect(res.factionLocation).to.be.equal(pm.environment.get('factionLocation'))",
									"        });",
									"",
									"    pm.test(\"Check 'active' field\", () => {",
									"        pm.expect(res.active).to.be.equal(false)",
									"        });",
									"    ",
									"    pm.test(\"Check state field\", () => {",
									"        pm.expect(res.state).to.be.equal('Provisioning')",
									"        });",
									"    }",
									"    else {console.log(\"Some errors occur over the cloud connection checking.\")}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{oleksTest}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/fix/connections/{{awsConnectionId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"fix",
								"connections",
								"{{awsConnectionId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ccv",
			"item": [
				{
					"name": "ccv list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaCCVs\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"",
									"    pm.collectionVariables.set(\"ccvId\", res[0].identifier);",
									"    pm.collectionVariables.set(\"ccvName\", res[0].name);",
									"    pm.collectionVariables.set(\"ccvTotalSizeInBytes\", res[0].totalSizeInBytes);",
									"    pm.collectionVariables.set(\"ccvusedSizeInBytes\", res[0].usedSizeInBytes);",
									"    pm.collectionVariables.set(\"ccvIops\", res[0].iops);",
									"    pm.collectionVariables.set(\"ccvSloThroughput\", res[0].sloThroughput);",
									"    pm.collectionVariables.set(\"ccvFactionLocationId\", res[0].factionLocationId);",
									"    pm.collectionVariables.set(\"ccvVersion\", res[0].version);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/ccv/volumes",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"ccv",
								"volumes"
							]
						}
					},
					"response": []
				},
				{
					"name": "ccv by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaCCV\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"Check CCV identifier\", ()=>{",
									"        pm.expect(res.identifier).to.be.equal(pm.collectionVariables.get('ccvId'))",
									"    });",
									"",
									"     pm.test(\"Check CCV name correctness\", ()=>{",
									"        pm.expect(res.name).to.be.equal(pm.collectionVariables.get('ccvName'))",
									"    });",
									"",
									"     pm.test(\"Check CCV totalSizeInBytes correctness\", ()=>{",
									"        pm.expect(res.totalSizeInBytes).to.be.equal(pm.collectionVariables.get('ccvTotalSizeInBytes'))",
									"    });",
									"",
									"    pm.test(\"Check CCV usedSizeInBytes correctness\", ()=>{",
									"        pm.expect(res.usedSizeInBytes).to.be.equal(pm.collectionVariables.get('ccvUsedSizeInBytes'))",
									"    });",
									"",
									"    pm.test(\"Check CCV iops correctness\", ()=>{",
									"        pm.expect(res.iops).to.be.equal(pm.collectionVariables.get('ccvIops'))",
									"    });",
									"",
									"    pm.test(\"Check CCV sloThroughput correctness\", ()=>{",
									"        pm.expect(res.sloThroughput).to.be.equal(pm.collectionVariables.get('ccvSloThroughput'))",
									"    });",
									"",
									"     pm.test(\"Check CCV factionLocationId correctness\", ()=>{",
									"        pm.expect(res.factionLocationId).to.be.equal(pm.collectionVariables.get('ccvFactionLocationId'))",
									"    });",
									"",
									"    pm.test(\"Check CCV version correctness\", ()=>{",
									"        pm.expect(res.version).to.be.equal(pm.collectionVariables.get('ccvVersion'))",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"ccv",
								"volumes",
								"{{ccvId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "*ccv metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"//     pm.test(\"Response schema validation\", ()=>{",
									"//         pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaMetrics\")));",
									"//     });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/ccv/volumes/:ccvId/metrics",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"ccv",
								"volumes",
								":ccvId",
								"metrics"
							],
							"variable": [
								{
									"key": "ccvId",
									"value": "{{ccvId}}",
									"description": "7e66a395-baf8-47ec-80f4-a2328137e378"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "fixCloudProvider",
			"value": "Aws",
			"type": "string"
		},
		{
			"key": "fixProviderRegion",
			"value": "us-east-1",
			"type": "string"
		},
		{
			"key": "restrictedAttachmentError",
			"value": "An error occurred during attachment(s) adding.",
			"type": "string"
		},
		{
			"key": "schemaErrorResponse",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"timestamp\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"integer\"\n    },\n    \"error\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"details\": {\n      \"type\": \"array\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"timestamp\",\n    \"status\",\n    \"error\",\n    \"message\",\n    \"details\",\n    \"path\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "schemaOrganizations",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"orgCode\": {\n          \"type\": \"string\"\n        },\n        \"pingPopulationId\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"name\",\n        \"orgCode\",\n        \"pingPopulationId\"\n      ],\n      \"additionalProperties\": false\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"orgCode\": {\n          \"type\": \"string\"\n        },\n        \"pingPopulationId\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"name\",\n        \"orgCode\",\n        \"pingPopulationId\"\n      ],\n      \"additionalProperties\": false\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaOrganization",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"orgCode\": {\n      \"type\": \"string\"\n    },\n    \"pingPopulationId\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"name\",\n    \"orgCode\",\n    \"pingPopulationId\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "schemaCCVs",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"totalSizeInBytes\": {\n          \"type\": \"number\"\n        },\n        \"usedSizeInBytes\": {\n          \"type\": \"integer\"\n        },\n        \"iops\": {\n          \"type\": \"integer\"\n        },\n        \"sloThroughput\": {\n          \"type\": \"integer\"\n        },\n        \"factionLocationId\": {\n          \"type\": \"string\"\n        },\n        \"networks\": {\n          \"type\": \"string\"\n        },\n        \"iqns\": {\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"type\": \"string\"\n        },\n        \"createdAt\": {\n          \"type\": \"string\"\n        },\n        \"tier\": {\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"name\",\n        \"totalSizeInBytes\",\n        \"usedSizeInBytes\",\n        \"iops\",\n        \"sloThroughput\",\n        \"factionLocationId\",\n        \"networks\",\n        \"iqns\",\n        \"version\",\n        \"createdAt\",\n        \"tier\",\n        \"type\"\n      ],\n      \"additionalProperties\": false\n    }\n  ]\n}\n      \n      \n    \n",
			"type": "string"
		},
		{
			"key": "schemaCCV",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"totalSizeInBytes\": {\n      \"type\": \"number\"\n    },\n    \"usedSizeInBytes\": {\n      \"type\": \"integer\"\n    },\n    \"iops\": {\n      \"type\": \"integer\"\n    },\n    \"sloThroughput\": {\n      \"type\": \"integer\"\n    },\n    \"factionLocationId\": {\n      \"type\": \"string\"\n    },\n    \"networks\": {\n      \"type\": \"string\"\n    },\n    \"iqns\": {\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"tier\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"name\",\n    \"totalSizeInBytes\",\n    \"usedSizeInBytes\",\n    \"iops\",\n    \"sloThroughput\",\n    \"factionLocationId\",\n    \"networks\",\n    \"iqns\",\n    \"version\",\n    \"createdAt\",\n    \"tier\",\n    \"type\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "schemaMetrics",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"health\": {\n      \"type\": \"string\"\n    },\n    \"capacity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"total\": {\n          \"type\": \"number\"\n        },\n        \"used\": {\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"total\",\n        \"used\"\n      ]\n    }\n  },\n  \"required\": [\n    \"health\",\n    \"capacity\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaUsers",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n      {\n          \"type\": \"object\",\n          \"properties\": {\n              \"identifier\": {\n                  \"type\": \"string\"\n              },\n              \"username\": {\n                  \"type\": \"string\"\n              },\n              \"firstName\": {\n                  \"type\": \"string\"\n              },\n              \"lastName\": {\n                  \"type\": \"string\"\n              },\n              \"email\": {\n                  \"type\": \"string\"\n              },\n              \"phone\": {\n                  \"type\": [\n                      \"string\",\n                      \"null\"\n                  ]\n              },\n              \"timezone\": {\n                  \"type\": [\n                      \"string\",\n                      \"null\"\n                  ]\n              },\n              \"photoUrl\": {\n                  \"type\": [\n                      \"string\",\n                      \"null\"\n                  ]\n              },\n              \"roles\": {\n                  \"type\": \"array\",\n                  \"items\": [\n                      {\n                          \"type\": \"string\"\n                      },\n                      {\n                          \"type\": \"string\"\n                      },\n                      {\n                          \"type\": \"string\"\n                      }\n                  ]\n              },\n              \"identitySource\": {\n                  \"type\": \"string\"\n              },\n              \"contactPreferences\": {\n                  \"type\": \"array\",\n                  \"items\": [\n                      {\n                          \"type\": \"string\"\n                      }\n                  ]\n              }\n          },\n          \"required\": [\n              \"identifier\",\n              \"username\",\n              \"firstName\",\n              \"lastName\",\n              \"email\",\n              \"phone\",\n              \"timezone\",\n              \"photoUrl\",\n              \"roles\",\n              \"identitySource\",\n              \"contactPreferences\"\n          ],\"additionalProperties\": false\n      }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaUser",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"username\": {\n      \"type\": \"string\"\n    },\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"phone\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"timezone\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"photoUrl\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"roles\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ]\n    },\n    \"identitySource\": {\n      \"type\": \"string\"\n    },\n    \"contactPreferences\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"string\"\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"username\",\n    \"firstName\",\n    \"lastName\",\n    \"email\",\n    \"phone\",\n    \"timezone\",\n    \"photoUrl\",\n    \"roles\",\n    \"identitySource\",\n    \"contactPreferences\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "schemaUserPassword",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"userStatus\": {\n      \"type\": \"string\"\n    },\n    \"password\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"userStatus\",\n    \"password\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "schemaUserChangePassword",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"userStatus\": {\n      \"type\": \"string\"\n    },\n    \"password\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"userStatus\",\n    \"password\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "ccvName",
			"value": "Data Warehouse"
		},
		{
			"key": "ccvTotalSizeInBytes",
			"value": 1615000000000
		},
		{
			"key": "ccvUsedSizeInBytes",
			"value": 0
		},
		{
			"key": "ccvIops",
			"value": 0
		},
		{
			"key": "ccvSloThroughput",
			"value": 10
		},
		{
			"key": "ccvFactionLocationId",
			"value": "UK1"
		},
		{
			"key": "ccvVersion",
			"value": "V2"
		},
		{
			"key": "ccvusedSizeInBytes",
			"value": 0
		},
		{
			"key": "myTimeZone",
			"value": "Europe/Kiev",
			"type": "string"
		},
		{
			"key": "2001charText",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Fusce vulputate eleifend sapien. Vestibulum purus quam, scelerisque ut, mollis sed, nonummy id, metus. Nullam accumsan lorem in dui. Cras ultricies mi eu turpis hendrerit fringilla. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; In ac dui quis mi consectetuer lacinia. Nam pretium turpis et arcu. Duis arcu tortor, suscipit eget, imperdiet nec, imperdiet iaculis, ipsum. Sed aliquam ultrices mauris. Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Praesent adipiscing. Phasellus ullamcorper ipsum rutrum nunc. Nunc nonummy metus. Vestibu",
			"type": "string"
		},
		{
			"key": "1027charText",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel,.",
			"type": "string"
		},
		{
			"key": "257charText",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, s",
			"type": "string"
		},
		{
			"key": "129charText",
			"value": "abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !&§ $%& /() =?* '<> #|; ²³~ @`´ ©«» ¤¼× {} abc def ghi jkl mn",
			"type": "string"
		},
		{
			"key": "128charText",
			"value": "qqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnm",
			"type": "string"
		},
		{
			"key": "33charText",
			"value": "Thequick,3brownfoxjumpsoverwa3123",
			"type": "string"
		},
		{
			"key": "33digitsPhoneNumber",
			"value": "+31234567890123456789012345678123",
			"type": "string"
		},
		{
			"key": "wrongUserId",
			"value": "'33506a3-0c23-4ce9-a590-8514cfbadac*",
			"type": "string"
		},
		{
			"key": "userTempPassword",
			"value": "Qwerty22@5"
		},
		{
			"key": "userPreviousPassword",
			"value": "NLIwK1rAaNlLTJ4+22"
		},
		{
			"key": "userForOneTimePasswordId",
			"value": "5239b602-778f-4ad5-ba25-8127129b1e8b"
		},
		{
			"key": "userFirstName",
			"value": "Alexanne"
		},
		{
			"key": "userLastName",
			"value": "test_Satterfield"
		},
		{
			"key": "userPhoneNumber",
			"value": "587-218-1440"
		},
		{
			"key": "userMainRole",
			"value": "Technician"
		},
		{
			"key": "userTimeZone",
			"value": "Europe/Kiev"
		},
		{
			"key": "userPhotoUrl",
			"value": null
		},
		{
			"key": "newTimeZone",
			"value": "America/Chicago",
			"type": "string"
		},
		{
			"key": "userName",
			"value": "Oswaldo.OReilly99"
		},
		{
			"key": "changedPhotoUrl",
			"value": "https://uploads.pingone.com/environments/51441281-305c-4e91-acc0-233470671c49/images/3a566f51-4f9b-45f7-8904-5d6331a06607_ec763a85-881d-4bec-9f3a-1fa5a77eb8d7_original.png"
		},
		{
			"key": "changedPassword",
			"value": "Asdfg11@k"
		},
		{
			"key": "longUserName",
			"value": "Pqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnm",
			"type": "string"
		},
		{
			"key": "longFirstName",
			"value": "Robertrtyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvd",
			"type": "string"
		},
		{
			"key": "longLastName",
			"value": "delete_Rertrtyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsa",
			"type": "string"
		},
		{
			"key": "longEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "longTimeZone",
			"value": "Kyivertrtyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsa/Kyivertrtyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdpirjfjdn",
			"type": "string"
		},
		{
			"key": "longPhoneNumber",
			"value": "098-5202-0509-1523-23432423-9081",
			"type": "string"
		},
		{
			"key": "mev",
			"value": "2b1fc6c7-2cfb-48a1-84f0-e5d5c8c2d234",
			"type": "string"
		},
		{
			"key": "randomString128",
			"value": "GyvhIFmV5ltboTZbXsLqMBBzrgqWPvOmXYDqTMWMIbVoOn7Jrzk1aO0QcLx8zXXQnpji4bDJUj2KJ89TnJoF5mvDI5JzXk21MIwRp2yJm2M8NA6QRQr7bhl4kSMynrIy"
		},
		{
			"key": "randomString1",
			"value": "x"
		},
		{
			"key": "randomString5001",
			"value": "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"
		},
		{
			"key": "randomString256",
			"value": "TNK9d8GcjJYny1YrQw2uw5Wivxg9jog9JQ5DT8mGfG7EoXzk4bco2tEWzduir9bzvj4ZKe19Y9r0gyw3LPzb2rrp29NAmVv7VRsjtzFbITajlwWLMNWXElMVJIfmIVT2ryp6lXcAMiMzPuYs8M2H9FIj9yNqHHEgsUpUJneseejGbxq8B8Exq3hBJJBvs4lrLjW16LHzUStqUQ5OEE0VFn9vk9BfPRPn9LBgiFpKQwa4FZ9bVhD0bDBJLRnH8Ufu"
		},
		{
			"key": "randomString161",
			"value": "j7b5eESycgLYicjdAeFkFdziWQW5FcpxwOmXYeEcNbnLC1pm8xQkViP7JG7BB8j4cHUSSu4gH79qHWDa2porWRcaBhaCto1e3WhadFVxffIESYzv28ku5gMWijBjL2deppqbEk9EDgcUOTHCTEUCAjtb1KEfgpdS9"
		},
		{
			"key": "randomString160",
			"value": "ixaYTECYMLexhVDl4gu0UmcLiOMq0WdsbQX8rp6PRmGOTqT0mN6TfkJiuVeloFPZEelMQv4BYYR7A0oyKCUDhsHRN7fCiXdJhfaV1Tu6iX0EbPgLVztK97hSxauxZUmnlNCQFGVMLQS8Zg0mal89Mqydo6VBBDHL"
		},
		{
			"key": "randomString5000",
			"value": "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"
		},
		{
			"key": "randomString255",
			"value": "FSTTf1HfmruR6fzlcvG9tdMsGBZx8KblK9bbEqm0TdTWUZ5mcSF1zEcyMNs8smqbyq4dsBn2eIibXYVXnjuETBOk7GKhzXeofRfBDbtRhg2zJY5YCQqsUBf6oo8rqebF8zaaLp0Q9kjh63OfFrAz1f3OZGD8kDQIBJcNCfQRlBDhOkAhNCiTNgOK1xDUAyG2QhsIV0xpMSWvTni6OWlB3t5KaTPt3YHRkOraBBQzae4LMvyZfGj1NCjuvUSg9co"
		},
		{
			"key": "randomPasswordString256",
			"value": "A-l%?jy-WexQmq-5w@icRWf04iU-$?l?kJuYJU-JH1!o?I0SUlx0QwKnR=m2^0qGKa7$cI670%ESiG8ZvRKbSU3Vxt$wWQZT(BdIohr%Bp8GB)2^hkUY&kd5QW&3^Jr4&pPFnT4p$a1z&^23ef9!s96@yA#Eoj@b4&@qtrY7VpXDq7=E+ce29oE^3-74d=5tp4t7W*c?W2r8Mf*)j7SzjBaId2R)Ze+GrKsdD#wcMy$lVJ!@mhLTgB)dhT&BR5Jy"
		},
		{
			"key": "randomString2001",
			"value": "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"
		},
		{
			"key": "randomString1027",
			"value": "cRjbUzsaTVtUPmqGbrfj3OmxmarwQLbNOtrddspPNqMvuoyyMEXXhlcgG4t6M03ecHRisJ6e5Sy8Xw5NyG1ctbIRZyvP2nVxbJOWLzQn2UKfhPOejfYVEbwquChCJZcGKt0bmhe9zm6jb47XJTHakgZvporLO2dHcqe2MLG6rUQWarufXbWrWzzXVAfiISGOQBwJslgvVhjHNq2eEuOyaRaKVdgqHCffQpRjII7td8VxBgpdABXyNs8tUjvxrfR7C5oyFEkdkFqEdBPb2VoV38M2jFnSWeZ3uCNyXnDVW5VhoK1ehqESj2oJeqK95P5H9oNbC9mhtdJsnHWCnXcowKzHqCNYWEjlvFnZlLGLGdQNIPWxwMd17emK3IoLED7vw5NbJOzyfj205M4ByXtaxyxHERmKBBl0LQzJAebLpyCHozxM5UynkrQUqeWyEpcHbfrcJp1JKzFZj5E4UIy0283RaPHLuyFCvyCF9RltYpomRcCzUD5BXMA9IGZPjeKmB3sZH8VClatwvovbhWbG42jBAcunc4X8y5YBNKKCsnCsDkJcnv2GKk4vp38MiLnSZfGLN9fBZGN6Sii3JDGTQYztvCGAg83KcrTbPUZdvtyd0eu0IVCauFRZ9blaxGlIvLfWhrXQMI4XZtDiYiNxjmL3F1be6g8ELn2BMUqVYp0mDDLifujkTiTXYlDfpUlDVhrI2ZMwfRfxvhXLEedYq8U18YIhCZhiJc4CLUyRWrEJrS46NGtXCqYhkDGIHM9puvIHnXficucAVanN6nfDkegDQtLhf6wHY6TYl1QrBjUo91e2Hmea2k3w1ld1avtsA4zS9pK20Rzl5D3z2e6U40zeSMcIfgjkUYTbhh5JnCAvASNALMN2BqR55sMc5xysFPbcr5VMsTMHEEvGaeookhns3NNfm4KpZqh0U4OBONbNNglmT4QZrfS9SsKcpv0bnpC7PRYwn2Ehl13B5ONdC9l6iTwKDQzoTxSPQ3BiRfVEUg8TSyCkvxvJaQ6DicdHkTu"
		},
		{
			"key": "schemaUserMFA",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"confirmationCode\": {\n      \"type\": \"null\"\n    },\n    \"mfaEnabled\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"email\",\n    \"confirmationCode\",\n    \"mfaEnabled\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "randomString7-15",
			"value": "MzEE3APmT4s5ugf"
		},
		{
			"key": "schemaErrorResponse1",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"timestamp\": {\n      \"type\": \"string\"\n    },\n    \"error\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"integer\"\n    },\n    \"details\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"timestamp\",\n    \"error\",\n    \"message\",\n    \"status\",\n    \"details\",\n    \"path\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "randomString1025",
			"value": "E20YIltceGZu7JleN6PJoKY21eTt7iqHwpRYHLLC2QkhVXDt529M1O07GotAEdwx0mxq2BFIwXonDuAwiEeaXwngwcZ8VHXZay4HP0BtEPHVvR3jWrgC2Tiysvk8QT4XbrDCcbz1Hpl70Ty6Aqf2LDQKjJ9nQn6pAEeKgBlByVpsM69VTKPxjrszfXg1yvaKfJHkLoFgFwQzyNEpnlJlCuSXjvAYgwbDLa2a3dWVA1SHEIJ4oYURXtCWodemLkdBIMgRtiU7xVbqPpZrcQTeMPrvcn5hlfVrHqbaK1dclisGsIymEo0fUamhhhAqvNkUh1ajZPxiZ1TceCjIvOKqYXJ0W1imAcCB9fJzDbfnDqpSgMxPDyatKNcYDr1J04PxJRPh820uWXUFiFVMkp9QVNhtOVIKTZ6ixlsezbyMJEdE8xRkpGb1Asfc8mMXuTH6VHZaZuvry9B2K72xipQfzl81x4LrtdQRutX8cMsNImbVbjkBnVLGSJCoeSXaCL0BcNG9EUz43DBGaQWeksJc20vPZ66RutDUR2zx4sCILgHUdo0gaQBbs1F4pjl5Uq1llxdCw6LDNKnsHjck6yxukCjTNLWVnm9Lr3bsGntIotdZEyVeYAwoLh8n40erzF0ifu1b0sJHBNjPbsIreuU79WaTb8N82fx8hX1A6CRqqoRcrxDAvHobjt43OETLBMP3YPiririC6X7MFooANqsMQayx5CF7NmADoYMdM9wSZ1B3v5QT61fAezJWY1U6cP1e1CiA1kaj2BtHMMJ1A3LjbVBOpwI7ur0Ry11Oqvo2hLAPj5IJ6xzUzD9quj7ej8OpOQcoxO1vcMXnqPkTxXKXTnPModWYTzVUUdebWhDn9PpOyzeQuGz43ZCazDUrgJ13DO1Z5g64WDugrGHoaGiMQkBZ01LNhZ1RA5BSzfqW3EBqZ7s6FoT1BCKfYnHfabHkLmGiaKJlIWUznt7hkGDGlN4OwEZKzDDa0Xyyih9NoLLX5dXsSd8FiSVPORlPVET6w"
		},
		{
			"key": "schemaFixConnections",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"connectionType\": {\n      \"type\": \"string\"\n    },\n    \"state\": {\n      \"type\": \"string\"\n    },\n    \"active\": {\n      \"type\": \"boolean\"\n    },\n    \"connectionData\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"bandwidthUnits\": {\n          \"type\": \"string\"\n        },\n        \"factionLocations\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"bandwidth\",\n        \"bandwidthUnits\",\n        \"factionLocations\"\n      ]\n    },\n    \"requestedChanges\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"bandwidth\": {\n              \"type\": \"integer\"\n            },\n            \"requestType\": {\n              \"type\": \"string\"\n            },\n            \"createdAt\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"bandwidth\",\n            \"requestType\",\n            \"createdAt\"\n          ]\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"connectionType\",\n    \"state\",\n    \"active\",\n    \"connectionData\",\n    \"requestedChanges\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "factionLocations",
			"value": "[CHI1,FR7,ATL1]"
		},
		{
			"key": "factionLocation",
			"value": "CHI1"
		},
		{
			"key": "randomAwsBandwidth",
			"value": 20
		},
		{
			"key": "awsRegions",
			"value": [
				"us-east-2",
				"us-east-1",
				"us-west-1",
				"us-west-2",
				"eu-central-1",
				"eu-west-2"
			]
		},
		{
			"key": "awsRegion",
			"value": "us-west-2"
		},
		{
			"key": "schemaFixConnectionAws",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"connectionType\": {\n      \"type\": \"string\"\n    },\n    \"state\": {\n      \"type\": \"string\"\n    },\n    \"active\": {\n      \"type\": \"boolean\"\n    },\n    \"connectionData\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"bandwidthUnits\": {\n          \"type\": \"string\"\n        },\n        \"factionLocations\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"connectionSubType\": {\n          \"type\": \"string\"\n        },\n        \"providerRegion\": {\n          \"type\": \"string\"\n        },\n        \"crossCloud\": {\n          \"type\": \"boolean\"\n        },\n        \"accountId\": {\n          \"type\": \"string\"\n        },\n        \"vifIds\": {\n          \"type\": \"array\",\n          \"items\": {}\n        }\n      },\n      \"required\": [\n        \"bandwidth\",\n        \"bandwidthUnits\",\n        \"factionLocations\",\n        \"connectionSubType\",\n        \"providerRegion\",\n        \"crossCloud\",\n        \"accountId\",\n        \"vifIds\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"requestedChanges\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"bandwidth\": {\n              \"type\": \"integer\"\n            },\n            \"crossCloud\": {\n              \"type\": \"boolean\"\n            },\n            \"requestType\": {\n              \"type\": \"string\"\n            },\n            \"createdAt\": {\n              \"type\": \"string\"\n            },\n            \"ticketNumber\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"bandwidth\",\n            \"crossCloud\",\n            \"requestType\",\n            \"createdAt\",\n            \"ticketNumber\"\n          ],\n          \"additionalProperties\": false\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"connectionType\",\n    \"state\",\n    \"active\",\n    \"connectionData\",\n    \"requestedChanges\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "schemaDeleteFixConnection",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"connectionType\": {\n      \"type\": \"string\"\n    },\n    \"state\": {\n      \"type\": \"string\"\n    },\n    \"active\": {\n      \"type\": \"boolean\"\n    },\n    \"connectionData\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"bandwidthUnits\": {\n          \"type\": \"string\"\n        },\n        \"factionLocations\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"bandwidth\",\n        \"bandwidthUnits\",\n        \"factionLocations\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"requestedChanges\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"bandwidth\": {\n              \"type\": \"integer\"\n            },\n            \"request_type\": {\n              \"type\": \"string\"\n            },\n            \"created_at\": {\n              \"type\": \"string\"\n            },\n            \"ticket_number\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"bandwidth\",\n            \"request_type\",\n            \"created_at\",\n            \"ticket_number\"\n          ],\n          \"additionalProperties\": false\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"connectionType\",\n    \"state\",\n    \"active\",\n    \"connectionData\",\n    \"requestedChanges\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "awsConnectionId",
			"value": "cc4f5a00-718f-456d-a193-014011f5452b"
		},
		{
			"key": "awsConnectionBandwidth",
			"value": ""
		},
		{
			"key": "changedAwsBandwidth",
			"value": 10
		},
		{
			"key": "schemaFixConnectionCloud",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"connectionType\": {\n      \"type\": \"string\"\n    },\n    \"state\": {\n      \"type\": \"string\"\n    },\n    \"active\": {\n      \"type\": \"boolean\"\n    },\n    \"connectionData\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"bandwidthUnits\": {\n          \"type\": \"string\"\n        },\n        \"factionLocations\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"connectionSubType\": {\n          \"type\": \"string\"\n        },\n        \"providerRegion\": {\n          \"type\": \"string\"\n        },\n        \"crossCloud\": {\n          \"type\": \"boolean\"\n        },\n        \"accountId\": {\n          \"type\": \"string\"\n        },\n        \"vifIds\": {\n          \"type\": \"array\",\n          \"items\": {}\n        }\n      },\n      \"required\": [\n        \"bandwidth\",\n        \"bandwidthUnits\",\n        \"factionLocations\",\n        \"connectionSubType\",\n        \"providerRegion\",\n        \"crossCloud\",\n        \"accountId\",\n        \"vifIds\"\n      ]\n    },\n    \"requestedChanges\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"bandwidth\": {\n              \"type\": \"integer\"\n            },\n            \"crossCloud\": {\n              \"type\": \"boolean\"\n            },\n            \"requestType\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"bandwidth\",\n            \"crossCloud\",\n            \"requestType\"\n          ]\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"connectionType\",\n    \"state\",\n    \"active\",\n    \"connectionData\",\n    \"requestedChanges\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "adjustBandwidth",
			"value": "adjust_bandwidth",
			"type": "string"
		},
		{
			"key": "updatedEmail",
			"value": ""
		},
		{
			"key": "updatedFirstName",
			"value": ""
		},
		{
			"key": "updatedLastName",
			"value": ""
		},
		{
			"key": "updatedPhoneNumber",
			"value": ""
		},
		{
			"key": "updatedMainRole",
			"value": ""
		},
		{
			"key": "updatedTimeZone",
			"value": ""
		},
		{
			"key": "updatedPhotoUrl",
			"value": ""
		},
		{
			"key": "updatedContactPreference",
			"value": ""
		},
		{
			"key": "randomString2",
			"value": ""
		},
		{
			"key": "bigNumberDashboardId",
			"value": ""
		},
		{
			"key": "bigNumberWidgetId",
			"value": ""
		},
		{
			"key": "newFirstName",
			"value": ""
		},
		{
			"key": "newLastName",
			"value": ""
		},
		{
			"key": "newEmail",
			"value": ""
		},
		{
			"key": "newPhoneNumber",
			"value": ""
		},
		{
			"key": "myUserFirstName",
			"value": ""
		},
		{
			"key": "myUserLastName",
			"value": ""
		},
		{
			"key": "myUserEmail",
			"value": ""
		},
		{
			"key": "myUserPhoneNumber",
			"value": ""
		},
		{
			"key": "myUserTimezone",
			"value": ""
		},
		{
			"key": "myUserPhotoUrl",
			"value": ""
		},
		{
			"key": "myUserSource",
			"value": ""
		},
		{
			"key": "myUserContactPreferenses",
			"value": ""
		},
		{
			"key": "myUserRoles",
			"value": ""
		}
	]
}